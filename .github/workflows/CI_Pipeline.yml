name: CI Pipeline

on:
  push:
    branches:
      - master # Trigger on 'master' branch pushes
  pull_request:
    branches:
      - master # Trigger on PRs to 'master'

jobs:
  # Job 1: Code Linting and Formatting Checks
  lint_and_format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use your desired Python version

    - name: Install linting and formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort # Or ruff, autopep8, etc.

    - name: Run Flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      working-directory: ./app # Assuming primary code is in 'app'

    - name: Run Black check
      run: black --check .
      working-directory: .

    - name: Run isort check
      run: isort --check-only .
      working-directory: .

  # Job 2: Unit Tests
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint_and_format # Run after linting and formatting pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies and testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov # Assuming pytest

    - name: Run Pytest with coverage
      # !!! Requires creating actual unit test files in a 'tests/unit/' directory
      run: pytest tests/unit/ --cov=./app --cov-report=xml # Cover code in app/

    - name: Upload coverage reports to Codecov (Optional)
      if: always()
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Requires CODECOV_TOKEN secret
        files: ./coverage.xml
        flags: unittests
        name: codecov-unittests

  # Job 3: HTTP Functional Tests
  http_functional_tests:
    name: HTTP Functional Tests
    runs-on: ubuntu-latest
    needs: unit_tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies and testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests pytest pytest-flask # Example tools

    - name: Set up environment variables (Mimic .env)
      run: |
        # Set non-sensitive variables directly
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        # Access sensitive variables from GitHub Secrets
        echo "SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" >> $GITHUB_ENV
        # Add any other required variables based on .env.example

    - name: Run the Flask app with Gunicorn in the background
      # Use gunicorn as per repository structure
      run: |
        gunicorn wsgi:app -c gunicorn.conf.py &
        sleep 10 # Give Gunicorn time to start

    - name: Run HTTP functional tests
      # !!! Requires creating actual HTTP functional test files in a 'tests/functional/http/' directory
      run: |
        pytest tests/functional/http/

  # Job 4: Websocket Functional Tests
  websocket_functional_tests:
    name: Websocket Functional Tests
    runs-on: ubuntu-latest
    needs: http_functional_tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies and testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install websockets pytest # Example tools

    - name: Set up environment variables (Mimic .env)
      run: |
        # Set non-sensitive variables directly
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        # Access sensitive variables from GitHub Secrets
        echo "SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" >> $GITHUB_ENV
        # Add any other required variables based on .env.example

    - name: Run the Flask app with Gunicorn in the background
      # Use gunicorn
      run: |
        gunicorn wsgi:app -c gunicorn.conf.py &
        sleep 10 # Give Gunicorn time to start

    - name: Run Websocket functional tests
      # !!! Requires creating actual Websocket functional test files in a 'tests/functional/websocket/' directory
      run: |
        pytest tests/functional/websocket/

  # Job 5: Security Scan (Dependency Check)
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    # Can run in parallel with other jobs if no dependencies needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Safety check
      run: |
        pip install safety
        safety check -r requirements.txt

  # Job 6: Docker Image Build
  docker_build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - lint_and_format
      - unit_tests
      - http_functional_tests
      - websocket_functional_tests
      - security_scan # Only build if all previous checks and tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        # Adjust the tag as needed, e.g., using git commit SHA
        run: docker build . -t word-train-webapp:latest
      # Add steps here to push to a registry if needed (requires Docker login)
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # - name: Push Docker image
      #   run: docker push your-docker-image-name:latest
